{
	"info": {
		"_postman_id": "4f2be6d1-cbd1-44c7-ac03-634ce3719219",
		"name": "User-Billing-Order-Notification-Stock-Delivery-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"phone\", '+' + _.random(10000000000000, 99999999999999));",
							"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
							"pm.collectionVariables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
							"pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
							"pm.collectionVariables.set(\"username\", pm.variables.replaceIn('{{$randomUserName}}'))",
							"",
							"postman.setGlobalVariable(\"api_info\", () => {",
							"    tests[\"[INFO] Request: \" + (('data' in request) ? request['data'] : '') ] = true;",
							"    tests[\"[INFO] Response: \" + responseBody] = true;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should create user and receive 201\", function () {",
							"    pm.response.to.have.status(201);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.collectionVariables.set(\"userId\", jsonData[\"id\"]);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"email\": \"{{email}}\",\n    \"phone\": \"{{phone}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by userId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find user by id\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"username\");",
							"    pm.expect(jsonData).to.have.property(\"firstName\");",
							"    pm.expect(jsonData).to.have.property(\"lastName\");",
							"    pm.expect(jsonData).to.have.property(\"email\");",
							"    pm.expect(jsonData).to.have.property(\"phone\");",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get billing account by userId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find account by user id\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"userId\");",
							"    pm.expect(jsonData).to.have.property(\"email\");",
							"    pm.expect(jsonData).to.have.property(\"balance\");",
							"    pm.expect(jsonData[\"balance\"]).to.equal(0);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/accounts/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send deposit for account by userId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should send deposit money for account by user id\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"amount\", 1000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": {{amount}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/accounts/{{userId}}/deposit",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"accounts",
						"{{userId}}",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get billing account by userId after deposit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find account by user id after deposit\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"userId\");",
							"    pm.expect(jsonData).to.have.property(\"email\");",
							"    pm.expect(jsonData).to.have.property(\"balance\");",
							"    pm.expect(jsonData[\"balance\"]).to.equal(pm.collectionVariables.get(\"amount\"));",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/accounts/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order for userId without x-request-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should return 'idempotence key missing' error for non-idempotent order\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"orderPrice\", 100);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": {{userId}},\n    \"price\": {{orderPrice}},\n    \"deliveryAddress\": {{deliveryAddress}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create idempotency key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should return generated idempotence key\", function () {",
							"    pm.response.to.have.status(200);",
							"    let idempotenceKey = pm.response.headers.get('x-request-id');",
							"    pm.expect(idempotenceKey).to.not.be.null;",
							"    pm.collectionVariables.set(\"idempotence-key\", idempotenceKey);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/idempotence-key/generate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"idempotence-key",
						"generate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order for userId with x-request-id (success)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should create order\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"    pm.expect(jsonData).to.have.property(\"price\");",
							"    pm.expect(jsonData).to.have.property(\"userId\");",
							"    pm.expect(jsonData).to.have.property(\"status\");",
							"",
							"    pm.expect(jsonData[\"price\"]).to.equal(100);",
							"    pm.expect(jsonData[\"status\"]).to.equal(\"DELIVERED_TO_CLIENT\");",
							"    pm.collectionVariables.set(\"orderId\", jsonData[\"id\"]);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"orderPrice\", 100);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-request-id",
						"value": "{{idempotence-key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": {{userId}},\n    \"price\": {{orderPrice}},\n    \"deliveryAddress\": {{deliveryAddress}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get order by orderId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should return order\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"status\");",
							"    pm.expect(jsonData[\"status\"]).to.equal(\"DELIVERED_TO_CLIENT\");",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders/{{orderId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get billing after order success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find account by user id after creating order\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"userId\");",
							"    pm.expect(jsonData).to.have.property(\"email\");",
							"    pm.expect(jsonData).to.have.property(\"balance\");",
							"",
							"    var expectedBalance = pm.collectionVariables.get(\"amount\") - pm.collectionVariables.get(\"orderPrice\");",
							"    pm.expect(jsonData[\"balance\"]).to.equal(expectedBalance);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/accounts/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get notifications with SUCCESS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find notification with state success\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.be.above(0);",
							"    ",
							"    var userId = pm.collectionVariables.get(\"userId\");",
							"    var notification = jsonData[jsonData.length - 1];",
							"    ",
							"    pm.expect(notification[\"userId\"]).to.equal(userId);",
							"    pm.expect(notification[\"state\"]).to.equal(\"SUCCESS\");",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notifications",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create idempotency key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should return generated idempotence key\", function () {",
							"    pm.response.to.have.status(200);",
							"    let idempotenceKey = pm.response.headers.get('x-request-id');",
							"    pm.expect(idempotenceKey).to.not.be.null;",
							"    pm.collectionVariables.set(\"idempotence-key\", idempotenceKey);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/idempotence-key/generate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"idempotence-key",
						"generate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order with billing exception",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should return acount balance error for creating order\", function () {",
							"    pm.response.to.have.status(400);",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"message\");",
							"    var orderId = jsonData.message.split('=')[1];",
							"    pm.collectionVariables.set(\"orderId\", orderId);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"tooLargeOrderPrice\", 1000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-request-id",
						"value": "{{idempotence-key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": {{userId}},\n    \"price\": {{tooLargeOrderPrice}},\n    \"deliveryAddress\": {{deliveryAddress}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get billing after order failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find account by id after successful creating order\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"userId\");",
							"    pm.expect(jsonData).to.have.property(\"email\");",
							"    pm.expect(jsonData).to.have.property(\"balance\");",
							"",
							"    var expectedBalance = pm.collectionVariables.get(\"amount\") - pm.collectionVariables.get(\"orderPrice\");",
							"    pm.expect(jsonData[\"balance\"]).to.equal(expectedBalance);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/accounts/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get notifications with PAYMENT_ERROR",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find notification with state PAYMENT_ERROR\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.be.above(0);",
							"    ",
							"    var userId = pm.collectionVariables.get(\"userId\");",
							"    var notification = jsonData[jsonData.length - 1];",
							"    ",
							"    pm.expect(notification[\"userId\"]).to.equal(userId);",
							"    pm.expect(notification[\"state\"]).to.equal(\"PAYMENT_ERROR\");",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"john.doe\",\n    \"email\": \"test@mail.com\",\n    \"phone\": \"123\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notifications",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create idempotency key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should return generated idempotence key\", function () {",
							"    pm.response.to.have.status(200);",
							"    let idempotenceKey = pm.response.headers.get('x-request-id');",
							"    pm.expect(idempotenceKey).to.not.be.null;",
							"    pm.collectionVariables.set(\"idempotence-key\", idempotenceKey);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/idempotence-key/generate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"idempotence-key",
						"generate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order with stock exception",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should return acount balance error for creating order\", function () {",
							"    pm.response.to.have.status(400);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"message\");",
							"    var orderId = jsonData.message.split('=')[1];",
							"    pm.collectionVariables.set(\"orderId\", orderId);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"tooLargeOrderPrice\", 1000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-request-id",
						"value": "{{idempotence-key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": {{userId}},\n    \"price\": {{orderPriceForStockError}},\n    \"deliveryAddress\": {{deliveryAddress}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get billing after order failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find account by id after successful creating order\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"userId\");",
							"    pm.expect(jsonData).to.have.property(\"email\");",
							"    pm.expect(jsonData).to.have.property(\"balance\");",
							"",
							"    var expectedBalance = pm.collectionVariables.get(\"amount\") - pm.collectionVariables.get(\"orderPrice\");",
							"    pm.expect(jsonData[\"balance\"]).to.equal(expectedBalance);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/accounts/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get notifications with RESERVATION_ERROR",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find notification with state RESERVATION_ERROR\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.be.above(0);",
							"    ",
							"    var userId = pm.collectionVariables.get(\"userId\");",
							"    var notification = jsonData[jsonData.length - 1];",
							"    ",
							"    pm.expect(notification[\"userId\"]).to.equal(userId);",
							"    pm.expect(notification[\"state\"]).to.equal(\"RESERVATION_ERROR\");",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"john.doe\",\n    \"email\": \"test@mail.com\",\n    \"phone\": \"123\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notifications",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create idempotency key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should return generated idempotence key\", function () {",
							"    pm.response.to.have.status(200);",
							"    let idempotenceKey = pm.response.headers.get('x-request-id');",
							"    pm.expect(idempotenceKey).to.not.be.null;",
							"    pm.collectionVariables.set(\"idempotence-key\", idempotenceKey);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/idempotence-key/generate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"idempotence-key",
						"generate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order with delivery exception",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should return acount balance error for creating order\", function () {",
							"    pm.response.to.have.status(400);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"message\");",
							"    var orderId = jsonData.message.split('=')[1];",
							"    pm.collectionVariables.set(\"orderId\", orderId);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"tooLargeOrderPrice\", 1000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-request-id",
						"type": "text",
						"value": "{{idempotence-key}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": {{userId}},\n    \"price\": 100,\n    \"deliveryAddress\": {{deliveryAddressForError}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get billing after order failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find account by id after successful creating order\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"userId\");",
							"    pm.expect(jsonData).to.have.property(\"email\");",
							"    pm.expect(jsonData).to.have.property(\"balance\");",
							"",
							"    var expectedBalance = pm.collectionVariables.get(\"amount\") - pm.collectionVariables.get(\"orderPrice\");",
							"    pm.expect(jsonData[\"balance\"]).to.equal(expectedBalance);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/billing/accounts/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get notifications with DELIVERY_ERROR",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app should find notification with state DELIVERY_ERROR\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.be.above(0);",
							"    ",
							"    var userId = pm.collectionVariables.get(\"userId\");",
							"    var notification = jsonData[jsonData.length - 1];",
							"    ",
							"    pm.expect(notification[\"userId\"]).to.equal(userId);",
							"    pm.expect(notification[\"state\"]).to.equal(\"DELIVERY_ERROR\");",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"john.doe\",\n    \"email\": \"test@mail.com\",\n    \"phone\": \"123\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notifications",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "stock reserve should return 200 for 100.00",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app stock reserve should return 200 for 100.00\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"price\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/reserve",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"reserve"
					]
				}
			},
			"response": []
		},
		{
			"name": "stock reserve should return 500 for 500.00",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app stock reserve should return 500 for 500.00\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"price\": 500\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stock/reserve",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stock",
						"reserve"
					]
				}
			},
			"response": []
		},
		{
			"name": "delivery/send should return 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app delivery/send should return 200 for any address\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": \"Москва\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/delivery/send",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delivery",
						"send"
					]
				}
			},
			"response": []
		},
		{
			"name": "delivery/send should return 500 for 'тест'",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"app delivery/send should return 500 for 'тест'\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"eval(pm.globals.get(\"api_info\"))();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": \"тест\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/delivery/send",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delivery",
						"send"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "phone",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "idempotence-key",
			"value": ""
		},
		{
			"key": "amount",
			"value": "1000"
		},
		{
			"key": "deliveryAddress",
			"value": "\"Москва, ул.Арбат, д.7, кв.1\""
		},
		{
			"key": "deliveryAddressForError",
			"value": "\"тест\""
		},
		{
			"key": "tooLargeOrderPrice",
			"value": "1000"
		},
		{
			"key": "orderPrice",
			"value": "100"
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "orderPriceForStockError",
			"value": "500"
		}
	]
}